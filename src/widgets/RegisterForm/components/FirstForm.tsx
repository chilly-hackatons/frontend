import { zodResolver } from '@hookform/resolvers/zod'
import { useForm } from 'react-hook-form'
import { Link } from 'react-router-dom'
import { z } from 'zod'

import { RoutePath } from '@/app/providers/router/config'
import { useSignUpContext } from '@/pages/SignUp/SignUpContext'
import { Button } from '@/shared/ui/button'
import {
  Card,
  CardContent,
  CardDescription,
  CardHeader,
  CardTitle,
} from '@/shared/ui/card'
import {
  Form,
  FormControl,
  FormField,
  FormItem,
  FormLabel,
  FormMessage,
} from '@/shared/ui/form'
import { Input } from '@/shared/ui/input'
import { RadioGroup, RadioGroupItem } from '@/shared/ui/radio-group'
import { useStepper } from '@/widgets/RegisterForm/context/RegisterFormStepperContext'

const defaultValues = {
  first_name: '',
  last_name: '',
  patronymic: '',
  email: '',
  password: '',
  repeat_password: '',
}

const formSchema = z
  .object({
    first_name: z
      .string()
      .min(2, {
        message: '–ò–º—è –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –Ω–µ –º–µ–Ω–µ–µ 2 —Å–∏–º–≤–æ–ª–æ–≤.',
      })
      .max(50),
    last_name: z.string().min(2, {
      message: '–§–∞–º–∏–ª–∏—è –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –Ω–µ –º–µ–Ω–µ–µ 2 —Å–∏–º–≤–æ–ª–æ–≤',
    }),
    patronymic: z.string().min(2, {
      message: '–û—Ç—á–µ—Å—Ç–≤–æ –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –Ω–µ –º–µ–Ω–µ–µ 2 —Å–∏–º–≤–æ–ª–æ–≤',
    }),
    email: z.string().email({
      message: '–ù–µ–≤–µ—Ä–Ω—ã–π –∞–¥—Ä–µ—Å —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω–æ–π –ø–æ—á—Ç—ã.',
    }),
    password: z.string().min(6, {
      message: '–ü–∞—Ä–æ–ª—å –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –Ω–µ –º–µ–Ω–µ–µ 6 —Å–∏–º–≤–æ–ª–æ–≤.',
    }),
    repeat_password: z.string().min(6, {
      message: '–ü–∞—Ä–æ–ª—å –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –Ω–µ –º–µ–Ω–µ–µ 6 —Å–∏–º–≤–æ–ª–æ–≤.',
    }),
    user_type: z.enum(['APPLICANT', 'RECRUITER'], {
      required_error: '–û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–µ –ø–æ–ª–µ',
    }),
  })
  .refine((data) => data.password === data.repeat_password, {
    message: ' –ü–∞—Ä–æ–ª–∏ –Ω–µ —Å–æ–≤–ø–∞–¥–∞—é—Ç',
    path: ['repeat_password'],
  })

export const FirstForm = () => {
  const { nextStep } = useStepper()
  const { updateUser, user } = useSignUpContext()

  const form = useForm<z.infer<typeof formSchema>>({
    resolver: zodResolver(formSchema),
    // eslint-disable-next-line @typescript-eslint/no-unnecessary-condition
    defaultValues: user ? user : defaultValues,
  })

  const onSubmit = (values: z.infer<typeof formSchema>) => {
    // eslint-disable-next-line @typescript-eslint/ban-ts-comment
    //@ts-ignore
    updateUser(values)
    nextStep()
  }

  return (
    <Card className="mx-auto max-w-sm">
      <CardHeader>
        <CardTitle className="text-xl">–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è</CardTitle>
        <CardDescription>
          –í–≤–µ–¥–∏—Ç–µ —Å–≤–æ–∏ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–Ω–∏—è —É—á–µ—Ç–Ω–æ–π –∑–∞–ø–∏—Å–∏
        </CardDescription>
      </CardHeader>

      <CardContent>
        <div className="grid gap-4">
          <Form {...form}>
            <form onSubmit={form.handleSubmit(onSubmit)} className="space-y-4">
              <div className="grid grid-cols-2 gap-4">
                <FormField
                  // eslint-disable-next-line @typescript-eslint/no-unnecessary-condition
                  control={form.control}
                  name="first_name"
                  render={({ field }) => (
                    <FormItem>
                      <FormLabel>–ò–º—è</FormLabel>
                      <FormControl>
                        <Input {...field} />
                      </FormControl>
                      <FormMessage />
                    </FormItem>
                  )}
                />

                <FormField
                  control={form.control}
                  name="last_name"
                  render={({ field }) => (
                    <FormItem>
                      <FormLabel>–§–∞–º–∏–ª–∏—è</FormLabel>
                      <FormControl>
                        <Input {...field} />
                      </FormControl>
                      <FormMessage />
                    </FormItem>
                  )}
                />
              </div>

              <div>
                <FormField
                  control={form.control}
                  name="patronymic"
                  render={({ field }) => (
                    <FormItem>
                      <FormLabel>–û—Ç—á–µ—Å—Ç–≤–æ</FormLabel>
                      <FormControl>
                        <Input {...field} />
                      </FormControl>
                      <FormMessage />
                    </FormItem>
                  )}
                />
              </div>

              <div>
                <FormField
                  control={form.control}
                  name="email"
                  render={({ field }) => (
                    <FormItem>
                      <FormLabel>–ü–æ—á—Ç–∞</FormLabel>
                      <FormControl>
                        <Input placeholder="user@mail.ru" {...field} />
                      </FormControl>
                      <FormMessage />
                    </FormItem>
                  )}
                />
              </div>

              <div>
                <FormField
                  control={form.control}
                  name="password"
                  render={({ field }) => (
                    <FormItem>
                      <FormLabel>–ü–∞—Ä–æ–ª—å</FormLabel>
                      <FormControl>
                        <Input type="password" {...field} />
                      </FormControl>
                      <FormMessage />
                    </FormItem>
                  )}
                />
              </div>

              <div>
                <FormField
                  control={form.control}
                  name="repeat_password"
                  render={({ field }) => (
                    <FormItem>
                      <FormLabel>–ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–∞—Ä–æ–ª—å</FormLabel>
                      <FormControl>
                        <Input type="password" {...field} />
                      </FormControl>
                      <FormMessage />
                    </FormItem>
                  )}
                />
              </div>

              <div>
                <FormField
                  control={form.control}
                  name="user_type"
                  render={({ field }) => (
                    <FormItem className="space-y-3">
                      <FormLabel>–ö—Ç–æ —Ç—ã –≤–æ–∏–Ω?</FormLabel>
                      <FormControl>
                        <RadioGroup
                          onValueChange={field.onChange}
                          defaultValue={field.value}
                          className="flex justify-between space-y-1 flex-wrap gap-4 "
                        >
                          <FormItem className="flex items-center space-x-3 space-y-0">
                            <FormControl>
                              <RadioGroupItem value="APPLICANT" />
                            </FormControl>
                            <FormLabel className="font-normal cursor-pointer">
                              –°–æ–∏—Å–∫–∞—Ç–µ–ª—å üë®üèº‚Äçüíª
                            </FormLabel>
                          </FormItem>
                          <FormItem className="flex items-center space-x-3 space-y-0">
                            <FormControl>
                              <RadioGroupItem value="RECRUITER" />
                            </FormControl>
                            <FormLabel className="font-normal cursor-pointer">
                              –†–µ–∫—Ä—É—Ç–µ—Ä üïµüèª‚Äç‚ôÄÔ∏è
                            </FormLabel>
                          </FormItem>
                        </RadioGroup>
                      </FormControl>
                      <FormMessage />
                    </FormItem>
                  )}
                />
              </div>

              <div className="flex gap-4 justify-between p-4 w-full">
                <Button disabled>–ù–∞–∑–∞–¥</Button>
                <Button type="submit">–î–∞–ª–µ–µ</Button>
              </div>
            </form>
          </Form>
        </div>

        <div className="mt-4 text-center text-sm">
          –£–∂–µ –µ—Å—Ç—å –∞–∫–∫–∞—É–Ω—Ç?{' '}
          <Link to={RoutePath.signIn} className="underline">
            –í–æ–π—Ç–∏
          </Link>
        </div>
      </CardContent>
    </Card>
  )
}
